.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" Copyright © 2002 - Philip Howard - All rights reserved
.\"
.\" This program is free software; you can redistribute it and/or
.\" modify it under the terms of the GNU Lesser General Public
.\" License as published by the Free Software Foundation; either
.\" version 2.1 of the License, or (at your option) any later version.
.\"
.\" This library is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
.\" Lesser General Public License for more details.
.\"
.\" You should have received a copy of the GNU Lesser General Public
.\" License along with this library; if not, write to the Free Software
.\" Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
.\"
.TH vrb_resize 3 2002-09-30 vrb "VRB Programmer's Manual"
.SH NAME
vrb_resize - create a new virtual ring buffer
.SH LIBRARY
.B -lvrb
.SH SYNOPSIS
.B #include <vrb.h>
.sp
.IB "vrb_p " "vrb_resize" "(size_t " "size" ", const char *" "name" ");"
.SH DESCRIPTION
.B vrb_resize
changes the size of a virtual ring buffer if the data in the
source buffer will fit in the requested space.
.SH ARGUMENTS
.IB "vrb_p " vrb
.br
specifies the ring buffer which will be resized.
.sp
.IB "size_t " size
.br
specifies the requested minimum buffer size to be allocated.
The given value will be rounded up to the nearest or equal whole
multiple of the system page size.
The virtual ring buffer is implemented by mapping two adjacent
blocks of memory to the same memory object.
Thus, twice as much virtual address space will be used and the
specified size must be less than half of the available virtual
address space for this process.
.sp
.IB "const char *" name
.br
specifies an optional name of a file to be used as backing store via
.B mmap(2)
in a mounted filesystem in which the process has write permission.
If the named file cannot be opened for write, an error will occur.
If
.B NULL
is given, swap space will be used as backing store via
.B shmat(2).
.SH "RETURN VALUE"
.I int
.br
On success, 0 is returned.
Otherwise, -1 is returned.
.SH ERRORS
If an error is returned, then
.I errno
will have one of the following values:
.TP
.B ENOSPC
The data in the current virtual ring buffer will not fit into the
requested space.
.TP
.B EINVAL
A buffer size was requested which is too large for address space
allocation arithmetic.
.TP
.B ENOMEM
Out of memory allocating the virtual ring buffer structure.
.TP
-
An
.I errno
value set by a failing system call.
.SH "SEE ALSO"
.BR vrb (3),
.BR vrb_capacity (3),
.BR vrb_data_len (3),
.BR vrb_data_ptr (3),
.BR vrb_destroy (3),
.BR vrb_get (3),
.BR vrb_get_min (3),
.BR vrb_give (3),
.BR vrb_init (3),
.BR vrb_init_opt (3),
.BR vrb_is_empty (3),
.BR vrb_is_full (3),
.BR vrb_is_not_empty (3),
.BR vrb_is_not_full (3),
.BR vrb_move (3),
.BR vrb_new (3),
.BR vrb_new_opt (3),
.BR vrb_put (3),
.BR vrb_put_all (3),
.BR vrb_read (3),
.BR vrb_read_min (3),
.BR vrb_space_len (3),
.BR vrb_space_ptr (3),
.BR vrb_take (3),
.BR vrb_uninit (3),
.BR vrb_write (3),
.BR vrb_write_min (3)
